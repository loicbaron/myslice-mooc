#!/usr/bin/env python 

'''
    MyOps2 - a new monitoring system for PlanetLab and other testbeds
    
    (c) 2014 - 2015 Ciro Scognamiglio <ciro.scognamiglio@lip6.fr>
'''

import sys
import os
import signal
import time
import datetime
import logging
import threading

import myops2.lib.store as s
from myops2.lib.queue import OrderedSetQueue
from myops2.settings import Config

# workers
from myops2.monitor.workers.status import agent
#from myops2.monitor.workers.resources import sync, queue

from planetlab.query import Query

logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s %(levelname)s [%(name)s] %(message)s",
                    datefmt="%Y-%m-%d %H:%M:%S",
                    filename="/var/log/myops2-monitor.log", filemode="a")

logger = logging.getLogger(__name__)

def receive_signal(signum, stack):
    #logger = logging.getLogger("myops2.main")
    logger.info('Received signal %s', signum)
    raise SystemExit('Exiting')




#
# def agent(num, input):
#     """
#     A thread that will check resource availability and information
#     """
#     logging.info("Agent %s starting" % num)
#
#     while True:
#         resource = input.get()
#
#         node = Query('Nodes').hostname(resource).execute().first()
#
#         if not node.enabled:
#             print "+=> (%s) %s is not enabled" % (node.boot, node.hostname)
#             availability = 0
#             status = "disabled"
#
#         elif not node.is_running():
#             print "+=> (%s) %s is not running" % (node.boot, node.hostname)
#             availability = 0
#             status = "down"
#         else:
#             # if not r:
#             #     print "+=> (%s) %s is not accessible" % (node.boot, node.hostname)
#             #     availability = 0
#             #     status = "no access"
#             # else :
#             #     print "+=> (%s) %s is ok" % (node.boot, node.hostname)
#             availability = 1
#             status = "up"
#                 #updates info about the node (testing)
#                 # d.info_resource(node.hostname, {
#                 #     #'ipv4' : node.ip(4),
#                 #     'ipv6' : node.ip(6),
#                 # })
#
#         s.update({
#             "hostname": node.hostname,
#             "bootstate": node.boot,
#             "status": status
#         })
#         ''' send OML stream '''
#         # oml.availability(node.hostname, availability)

            
if __name__ == '__main__':

    signal.signal(signal.SIGINT, receive_signal)
    signal.signal(signal.SIGTERM, receive_signal)
    signal.signal(signal.SIGHUP, receive_signal)

    logger.info('Starting Monitor service')

    """
    Setup DB Store (Rethinkdb)
    """
    s.setup()

    """
    SetUp supported Testbeds
    """
    s.testbeds()

    #
    # '''
    #     resource discovery thread: will retrieve resources from a remote end
    # '''
    # logger.info("Starting resources thread")
    # t = threading.Thread(target=sync)
    # t.daemon = True
    # t.start()

    ''' input queue '''
    input = OrderedSetQueue()

    # agent threads
    threads = []
    for y in range(2):
        t = threading.Thread(target=agent, args=(y, input))
        t.daemon = True
        threads.append(t)
        t.start()



    while True:

        try:
            nodes = Query('Nodes').peer(None).execute()

            for node in nodes:
                #site = node.site
                s.resource(
                    {
                        "testbed": "ple",
                        "hostname": node.hostname
                        # "site": {
                        #     "id": site.site_id,
                        #     "name" : site.name,
                        #     "short": site.abbreviated_name,
                        #     "login_base": site.login_base
                        # }
                    }
                )
                input.put(node.hostname)

            #s.resources()



        except Exception as e:
            logger.exception("Service does not seem to be available")

        time.sleep(86400)

    #t.join()
